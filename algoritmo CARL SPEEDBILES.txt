#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

// Função para limpar a tela do console (funciona em sistemas Unix e Windows)
void limparTela() {
    system("clear || cls");
}

// Estrutura para armazenar informações do usuário
typedef struct {
    char nome[50];
    char email[100];
    char senha[50];
} Usuario;

// Estrutura para representar uma moto na loja
typedef struct {
    char nome[50];
    double preco;
    int quantidade;
} Moto;

// Função para verificar a validade do e-mail
bool validarEmail(const char *email) {
    // Implemente a validação de e-mail adequada aqui
    // Este é um exemplo simples que apenas verifica a presença do símbolo '@'
    return strchr(email, '@') != NULL;
}

// Função para realizar login
bool fazerLogin(Usuario *usuario) {
    printf("Digite seu nome: ");
    scanf("%s", usuario->nome);

    printf("Digite seu e-mail: ");
    scanf("%s", usuario->email);

    printf("Digite sua senha: ");
    scanf("%s", usuario->senha);

    if (validarEmail(usuario->email)) {
        return true;
    } else {
        printf("E-mail inválido. Tente novamente.\n");
        return false;
    }
}

// Função para mostrar o menu de opções
void mostrarMenu(bool isAdmin) {
    printf("\nOpções:\n");
    printf("1. Catálogo de motos\n");
    printf("2. Sorteio\n");
    if (isAdmin) {
        printf("5. Gerenciar Catálogo\n"); // Alterada para "Gerenciar Catálogo"
        printf("6. Adicionar motos no catálogo\n");
        printf("7. Excluir motos do catálogo\n");
    }
    printf("3. Central de Ajuda\n");
    printf("4. Sair\n");
}

// Função para apresentar mensagem de boas-vindas
void mensagemBoasVindas(const Usuario *usuario, bool isAdmin) {
    printf("\nBem-vindo, %s!\n", usuario->nome);
    if (isAdmin) {
        printf("Você está logado como Administrador.\n");
    }
    printf("Seu e-mail (%s) foi verificado com sucesso.\n", usuario->email);
    printf("Aproveite suas compras na CARL_SPEEDBIKES!\n");
}

// Função para realizar vendas de motos
void venderMoto(Moto *loja, int tamanhoLoja) {
    if (tamanhoLoja == 0) {
        printf("A loja não tem motos disponíveis para venda no momento.\n");
        return;
    }

    printf("\nCatálogo de Motos Disponíveis:\n");
    printf("%-3s %-20s %-15s %-10s\n", "ID", "Nome", "Preço (R$)", "Quantidade");
    for (int i = 0; i < tamanhoLoja; i++) {
        printf("%-3d %-20s %-15.2lf %-10d\n", i + 1, loja[i].nome, loja[i].preco, loja[i].quantidade);
    }

    int escolha;
    printf("Digite o ID da moto que deseja comprar (1-%d) ou 0 para voltar: ", tamanhoLoja);
    scanf("%d", &escolha);

    if (escolha >= 1 && escolha <= tamanhoLoja) {
        int quantidade;
        printf("Digite a quantidade desejada: ");
        scanf("%d", &quantidade);

        if (quantidade <= 0 || quantidade > loja[escolha - 1].quantidade) {
            printf("Quantidade inválida. A compra não pode ser realizada.\n");
        } else {
            double valorUnitario = loja[escolha - 1].preco;
            double valorTotal = valorUnitario * quantidade * 0.9; // Aplica o desconto de 10%
            
            printf("Valor total da compra (com 10%% de desconto): R$%.2lf\n", valorTotal);
            printf("Desconto de 10%% aplicado com sucesso!\n"); // Mensagem de desconto aplicado
            printf("Compra realizada com sucesso. Obrigado!\n");

            // Atualize a quantidade de motos disponíveis no catálogo
            loja[escolha - 1].quantidade -= quantidade;
        }
    } else if (escolha == 0) {
        printf("Voltando ao menu inicial...\n");
    } else {
        printf("Opção inválida. Tente novamente.\n");
    }
}

// Função para realizar um sorteio com número máximo 20
void realizarSorteio() {
    int numeroMaximo = 20;
    int numeroCliente;
    int numeroSorteado;

    printf("\nDigite o seu número de cliente (1-20): ");
    scanf("%d", &numeroCliente);

    if (numeroCliente < 1 || numeroCliente > numeroMaximo) {
        printf("Número de cliente inválido. Deve estar entre 1 e 20.\n");
        return;
    }

    numeroSorteado = rand() % numeroMaximo + 1;

    printf("Sorteio realizado! O número sorteado é: %d\n", numeroSorteado);

    if (numeroCliente == numeroSorteado) {
        printf("Parabéns! Você é o cliente sorteado!\n");
    } else {
        printf("Infelizmente, você não foi o cliente sorteado desta vez. Tente novamente na próxima!\n");
    }
}

// Função para adicionar motos à loja
void adicionarMotos(Moto *loja, int *tamanhoLoja) {
    // Implementação da função de adição de motos
}

// Função para excluir motos do catálogo
void excluirMotos(Moto *loja, int *tamanhoLoja) {
    // Implementação da função de exclusão de motos
}

// Função para acessar o Local ADM (Administrador)
void acessarLocalADM(Moto *loja, int *tamanhoLoja) {
    // Implementação da função do Local ADM
}

int main() {
    Usuario usuario;
    bool logado = false;
    bool isAdmin = false; // Define se o usuário é o administrador

    printf("### Bem-vindo à CARL_SPEEDBIKES ###\n");

    while (!logado) {
        logado = fazerLogin(&usuario);
    }

    // Verificar se o usuário é o administrador (substitua pelo seu critério)
    if (strcmp(usuario.email, "admin@example.com") == 0) {
        isAdmin = true;
    }

    mensagemBoasVindas(&usuario, isAdmin); // Mostrar a mensagem de boas-vindas

    int escolha;
    srand(time(NULL));

    Moto loja[10]; // Capacidade máxima de 10 motos na loja
    int tamanhoLoja = 0; // Quantidade atual de motos na loja

    // Adicionei algumas motos fictícias ao catálogo
    strcpy(loja[tamanhoLoja].nome, "Pop 100");
    loja[tamanhoLoja].preco = 10000.0;
    loja[tamanhoLoja].quantidade = 5;
    tamanhoLoja++;

    strcpy(loja[tamanhoLoja].nome, "Honda 125");
    loja[tamanhoLoja].preco = 8000.0;
    loja[tamanhoLoja].quantidade = 3;
    tamanhoLoja++;

    strcpy(loja[tamanhoLoja].nome, "Honda 150");
    loja[tamanhoLoja].preco = 12000.0;
    loja[tamanhoLoja].quantidade = 7;
    tamanhoLoja++;

    strcpy(loja[tamanhoLoja].nome, "Biz 125");
    loja[tamanhoLoja].preco = 9000.0;
    loja[tamanhoLoja].quantidade = 2;
    tamanhoLoja++;

    strcpy(loja[tamanhoLoja].nome, "CB 500");
    loja[tamanhoLoja].preco = 11000.0;
    loja[tamanhoLoja].quantidade = 4;
    tamanhoLoja++;

    strcpy(loja[tamanhoLoja].nome, "Biz 110i");
    loja[tamanhoLoja].preco = 9500.0;
    loja[tamanhoLoja].quantidade = 8;
    tamanhoLoja++;

    strcpy(loja[tamanhoLoja].nome, "Honda ADV");
    loja[tamanhoLoja].preco = 10500.0;
    loja[tamanhoLoja].quantidade = 6;
    tamanhoLoja++;

    do {
        mostrarMenu(isAdmin); // Mostrar o menu após a mensagem de boas-vindas
        printf("Escolha uma opção (1/2");
        if (isAdmin) {
            printf("/5/6/7");
        }
        printf("/3/4): ");
        scanf("%d", &escolha);

        switch (escolha) {
            case 1:
                venderMoto(loja, tamanhoLoja);
                break;
            case 2:
                realizarSorteio();
                break;
            case 5:
                if (isAdmin) {
                    acessarLocalADM(loja, &tamanhoLoja);
                } else {
                    printf("Opção inválida. Tente novamente.\n");
                }
                break;
            case 6:
                if (isAdmin) {
                    adicionarMotos(loja, &tamanhoLoja);
                } else {
                    printf("Opção inválida. Tente novamente.\n");
                }
                break;
            case 7:
                if (isAdmin) {
                    excluirMotos(loja, &tamanhoLoja);
                } else {
                    printf("Opção inválida. Tente novamente.\n");
                }
                break;
            case 3:
                printf("Central de Ajuda - Entre em contato com o suporte para obter assistência.\n");
                break;
            case 4:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }

        printf("\nPressione Enter para continuar...");
        getchar(); // Aguarda que o usuário pressione Enter
        getchar(); // Aguarda novamente para evitar que a leitura do Enter seja usada na próxima entrada
        limparTela(); // Limpa a tela do console
    } while (escolha != 4);

    return 0;
}


Acesse ao Menu ADM com o seguinte Email "admin@example.com"
